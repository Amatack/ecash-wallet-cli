"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSpendScriptP2trMusig2 = exports.createSpendScriptP2tr = exports.createKeyPathP2trMusig2 = exports.getLeafHash = exports.createPaymentP2trMusig2 = exports.createPaymentP2tr = exports.checkTxHash = exports.checkTapMerkleRoot = exports.checkPlainPublicKey = exports.checkXOnlyPublicKey = exports.toXOnlyPublicKey = exports.createOutputScript2of3 = exports.getOutputScript = exports.createOutputScriptP2shP2pk = exports.scriptType2Of3AsPrevOutType = exports.isSupportedScriptType = exports.hasWitnessData = exports.isScriptType2Of3 = exports.scriptTypes2Of3 = exports.scriptTypeP2shP2pk = exports.scriptTypeForChain = void 0;
const assert = require("assert");
const bitcoinjs = require("bitcoinjs-lib");
const __1 = require("..");
const types_1 = require("./types");
const noble_ecc_1 = require("../noble_ecc");
const taproot_1 = require("../taproot");
var chains_1 = require("./wallet/chains");
Object.defineProperty(exports, "scriptTypeForChain", { enumerable: true, get: function () { return chains_1.scriptTypeForChain; } });
exports.scriptTypeP2shP2pk = 'p2shP2pk';
exports.scriptTypes2Of3 = ['p2sh', 'p2shP2wsh', 'p2wsh', 'p2tr', 'p2trMusig2'];
function isScriptType2Of3(t) {
    return exports.scriptTypes2Of3.includes(t);
}
exports.isScriptType2Of3 = isScriptType2Of3;
/**
 * @return true iff scriptType requires witness data
 */
function hasWitnessData(scriptType) {
    return ['p2shP2wsh', 'p2wsh', 'p2tr', 'p2trMusig2'].includes(scriptType);
}
exports.hasWitnessData = hasWitnessData;
/**
 * @param network
 * @param scriptType
 * @return true iff script type is supported for network
 */
function isSupportedScriptType(network, scriptType) {
    switch (scriptType) {
        case 'p2sh':
        case 'p2shP2pk':
            return true;
        case 'p2shP2wsh':
        case 'p2wsh':
            return __1.supportsSegwit(network);
        case 'p2tr':
        case 'p2trMusig2':
            return __1.supportsTaproot(network);
    }
    /* istanbul ignore next */
    throw new Error(`unexpected script type ${scriptType}`);
}
exports.isSupportedScriptType = isSupportedScriptType;
/**
 * @param t
 * @return string prevOut as defined in PREVOUT_TYPES (bitcoinjs-lib/.../transaction_builder.js)
 */
function scriptType2Of3AsPrevOutType(t) {
    switch (t) {
        case 'p2sh':
            return 'p2sh-p2ms';
        case 'p2shP2wsh':
            return 'p2sh-p2wsh-p2ms';
        case 'p2wsh':
            return 'p2wsh-p2ms';
        case 'p2tr':
            return 'p2tr-p2ns';
        case 'p2trMusig2':
            return 'p2tr';
    }
    /* istanbul ignore next */
    throw new Error(`unsupported script type ${t}`);
}
exports.scriptType2Of3AsPrevOutType = scriptType2Of3AsPrevOutType;
/**
 * Return scripts for p2sh-p2pk (used for BCH/BSV replay protection)
 * @param pubkey
 */
function createOutputScriptP2shP2pk(pubkey) {
    const p2pk = bitcoinjs.payments.p2pk({ pubkey });
    const p2sh = bitcoinjs.payments.p2sh({ redeem: p2pk });
    if (!p2sh.output || !p2pk.output) {
        throw new Error(`invalid state`);
    }
    return {
        scriptPubKey: p2sh.output,
        redeemScript: p2pk.output,
    };
}
exports.createOutputScriptP2shP2pk = createOutputScriptP2shP2pk;
function getOutputScript(scriptType, conditionScript) {
    let output;
    switch (scriptType) {
        case 'p2sh':
            ({ output } = bitcoinjs.payments.p2sh({ redeem: { output: conditionScript } }));
            break;
        case 'p2shP2wsh':
            ({ output } = bitcoinjs.payments.p2sh({
                redeem: { output: getOutputScript('p2wsh', conditionScript) },
            }));
            break;
        case 'p2wsh':
            ({ output } = bitcoinjs.payments.p2wsh({ redeem: { output: conditionScript } }));
            break;
    }
    if (output === undefined) {
        throw new Error(`output undefined`);
    }
    return output;
}
exports.getOutputScript = getOutputScript;
/**
 * Return scripts for 2-of-3 multisig output
 * @param pubkeys - the key triple for multisig
 * @param scriptType
 * @param network - if set, performs sanity check for scriptType support
 * @returns {{redeemScript, witnessScript, scriptPubKey}}
 */
function createOutputScript2of3(pubkeys, scriptType, network) {
    if (network) {
        if (!isSupportedScriptType(network, scriptType)) {
            throw new Error(`unsupported script type ${scriptType} for network`);
        }
    }
    if (!types_1.isTriple(pubkeys)) {
        throw new Error(`must provide pubkey triple`);
    }
    pubkeys.forEach((key) => {
        if (key.length !== 33) {
            throw new Error(`Unexpected key length ${key.length}. Must use compressed keys.`);
        }
    });
    if (scriptType === 'p2tr' || scriptType === 'p2trMusig2') {
        // p2tr/p2trMusig2 addresses use a combination of 2 of 2 multisig scripts distinct from
        // the 2 of 3 multisig used for other script types
        return createTaprootScript2of3(scriptType, pubkeys);
    }
    const script2of3 = bitcoinjs.payments.p2ms({ m: 2, pubkeys });
    assert(script2of3.output);
    let redeemScript;
    let witnessScript;
    switch (scriptType) {
        case 'p2sh':
            redeemScript = script2of3;
            break;
        case 'p2shP2wsh':
            witnessScript = script2of3;
            redeemScript = bitcoinjs.payments.p2wsh({ redeem: script2of3 });
            break;
        case 'p2wsh':
            witnessScript = script2of3;
            break;
        default:
            throw new Error(`unknown multisig script type ${scriptType}`);
    }
    return {
        scriptPubKey: getOutputScript(scriptType, script2of3.output),
        redeemScript: redeemScript === null || redeemScript === void 0 ? void 0 : redeemScript.output,
        witnessScript: witnessScript === null || witnessScript === void 0 ? void 0 : witnessScript.output,
    };
}
exports.createOutputScript2of3 = createOutputScript2of3;
function toXOnlyPublicKey(b) {
    if (b.length === 33) {
        return b.slice(1);
    }
    if (b.length === 32) {
        return b;
    }
    throw new Error(`invalid key size ${b.length}`);
}
exports.toXOnlyPublicKey = toXOnlyPublicKey;
function checkSize(b, targetSize, name) {
    if (b.length === targetSize) {
        return b;
    }
    throw new Error(`invalid size ${b.length}. Must use ${name}.`);
}
/**
 * Validates size of the pub key for 32 bytes and returns the same iff true.
 */
function checkXOnlyPublicKey(b) {
    return checkSize(b, 32, 'x-only key');
}
exports.checkXOnlyPublicKey = checkXOnlyPublicKey;
/**
 * Validates size of the pub key for 32 bytes and returns the same iff true.
 */
function checkPlainPublicKey(b) {
    return checkSize(b, 33, 'plain key');
}
exports.checkPlainPublicKey = checkPlainPublicKey;
function checkTapMerkleRoot(b) {
    return checkSize(b, 32, 'tap merkle root');
}
exports.checkTapMerkleRoot = checkTapMerkleRoot;
function checkTxHash(b) {
    return checkSize(b, 32, 'tx hash');
}
exports.checkTxHash = checkTxHash;
function getTaptreeKeyCombinations(scriptType, keys) {
    const [userKey, backupKey, bitGoKey] = keys.map((k) => toXOnlyPublicKey(k));
    return scriptType === 'p2tr'
        ? [
            [userKey, bitGoKey],
            [userKey, backupKey],
            [backupKey, bitGoKey],
        ]
        : [
            [userKey, backupKey],
            [backupKey, bitGoKey],
        ];
}
function getKeyPathCombination(scriptType, keys) {
    const sanitizePublicKey = scriptType === 'p2tr' ? toXOnlyPublicKey : checkPlainPublicKey;
    return [sanitizePublicKey(keys[0]), sanitizePublicKey(keys[2])];
}
function getRedeemIndex(keyCombinations, signer, cosigner) {
    signer = toXOnlyPublicKey(signer);
    cosigner = toXOnlyPublicKey(cosigner);
    const i = keyCombinations.findIndex(([a, b]) => {
        if (a.length !== signer.length || b.length !== cosigner.length) {
            throw new Error(`invalid comparison`);
        }
        return (a.equals(signer) && b.equals(cosigner)) || (a.equals(cosigner) && b.equals(signer));
    });
    if (0 <= i) {
        return i;
    }
    throw new Error(`could not find singer/cosigner combination`);
}
function createPaymentP2trCommon(scriptType, pubkeys, redeemIndex) {
    const keyCombinations2of2 = getTaptreeKeyCombinations(scriptType, pubkeys);
    if (typeof redeemIndex === 'object') {
        redeemIndex = getRedeemIndex(keyCombinations2of2, redeemIndex.signer, redeemIndex.cosigner);
    }
    const redeems = keyCombinations2of2.map((pubkeys, index) => __1.p2trPayments.p2tr_ns({
        pubkeys,
        depth: scriptType === 'p2trMusig2' || index === 0 ? 1 : 2,
    }, { eccLib: noble_ecc_1.ecc }));
    return __1.p2trPayments.p2tr({
        pubkeys: getKeyPathCombination(scriptType, pubkeys),
        redeems,
        redeemIndex,
    }, { eccLib: noble_ecc_1.ecc });
}
function createPaymentP2tr(pubkeys, redeemIndex) {
    return createPaymentP2trCommon('p2tr', pubkeys, redeemIndex);
}
exports.createPaymentP2tr = createPaymentP2tr;
function createPaymentP2trMusig2(pubkeys, redeemIndex) {
    return createPaymentP2trCommon('p2trMusig2', pubkeys, redeemIndex);
}
exports.createPaymentP2trMusig2 = createPaymentP2trMusig2;
function getLeafHashCommon(scriptType, params) {
    if ('publicKeys' in params) {
        params = createPaymentP2trCommon(scriptType, params.publicKeys, params);
    }
    const { output, controlBlock, redeem } = params;
    if (!output || !controlBlock || !redeem || !redeem.output) {
        throw new Error(`invalid state`);
    }
    return __1.taproot.getTapleafHash(noble_ecc_1.ecc, controlBlock, redeem.output);
}
function getLeafHash(params) {
    return getLeafHashCommon('p2tr', params);
}
exports.getLeafHash = getLeafHash;
function createKeyPathP2trMusig2(pubkeys) {
    const payment = createPaymentP2trCommon('p2trMusig2', pubkeys);
    assert(payment.internalPubkey);
    assert(payment.tapTree);
    return {
        internalPubkey: payment.internalPubkey,
        outputPubkey: taproot_1.getTweakedOutputKey(payment),
        taptreeRoot: taproot_1.getDepthFirstTaptree(payment.tapTree).root,
    };
}
exports.createKeyPathP2trMusig2 = createKeyPathP2trMusig2;
function createSpendScriptP2trCommon(scriptType, pubkeys, keyCombination) {
    const keyCombinations = getTaptreeKeyCombinations(scriptType, pubkeys);
    const [a, b] = keyCombination.map((k) => toXOnlyPublicKey(k));
    const redeemIndex = keyCombinations.findIndex(([c, d]) => (a.equals(c) && b.equals(d)) || (a.equals(d) && b.equals(c)));
    if (redeemIndex < 0) {
        throw new Error(`could not find redeemIndex for key combination`);
    }
    const payment = createPaymentP2trCommon(scriptType, pubkeys, redeemIndex);
    const { controlBlock } = payment;
    assert(Buffer.isBuffer(controlBlock));
    assert(payment.redeem);
    const leafScript = payment.redeem.output;
    assert(Buffer.isBuffer(leafScript));
    const parsedControlBlock = __1.taproot.parseControlBlock(noble_ecc_1.ecc, controlBlock);
    const { leafVersion } = parsedControlBlock;
    const leafHash = __1.taproot.getTapleafHash(noble_ecc_1.ecc, parsedControlBlock, leafScript);
    return {
        controlBlock,
        witnessScript: leafScript,
        leafVersion,
        leafHash,
    };
}
function createSpendScriptP2tr(pubkeys, keyCombination) {
    return createSpendScriptP2trCommon('p2tr', pubkeys, keyCombination);
}
exports.createSpendScriptP2tr = createSpendScriptP2tr;
function createSpendScriptP2trMusig2(pubkeys, keyCombination) {
    return createSpendScriptP2trCommon('p2trMusig2', pubkeys, keyCombination);
}
exports.createSpendScriptP2trMusig2 = createSpendScriptP2trMusig2;
/**
 * Creates and returns a taproot output script using the user+bitgo keys for the aggregate
 * public key using MuSig2 and a taptree containing either of the following depends on scriptType.
 * p2tr type: a user+bitgo 2-of-2 script at the first depth level of the tree and user+backup
 * and bitgo+backup 2-of-2 scripts one level deeper.
 * p2trMusig2 type: user+backup and bitgo+backup 2-of-2 scripts at the first depth level of the
 * tree.
 * @param pubkeys - a pubkey array containing the user key, backup key, and bitgo key in that order
 * @returns {{scriptPubKey}}
 */
function createTaprootScript2of3(scriptType, pubkeys) {
    const { output } = createPaymentP2trCommon(scriptType, pubkeys);
    assert(Buffer.isBuffer(output));
    return {
        scriptPubKey: output,
    };
}
//# sourceMappingURL=data:application/json;base64,